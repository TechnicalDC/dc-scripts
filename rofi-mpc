#!/usr/bin/env python3
from subprocess import Popen, PIPE, STDOUT, check_output, check_call
from pathlib import Path
from os import listdir, getenv
from os.path import isfile, join
import sys

rofi_theme = "/home/dilip/.config/rofi/themes/minimal/list.rasi"
host = "127.0.0.1"

def getCurrent():
	return check_output(["mpc","-h",host, "current"]);

def getState():
    return check_output(["mpc", "-h", host, "status", "%state%"])

current = getCurrent().decode()
if not current:
	current = "Nothing is currently Playing"
else:
    current = "Currently " + getState().decode().rstrip() + ": " +current.rstrip()

def run_rofi():
    commands = b"List\nPlay/Pause\nNext\nPrev\nRandom\nVolume 25%\nVolume 35%\nVolume 50%\nVolume 75%\nVolume 100%"
    rofi = Popen(["rofi", "-theme", rofi_theme, "-no-sidebar-mode", "-no-show-icons", "-selected-row", "1", "-mesg", current, "-i", "-dmenu", "-p", "  "], stdout=PIPE, stdin=PIPE)
    tmp = rofi.communicate(input=commands)[0].decode().rstrip()
    if tmp == "Play/Pause":
            check_call(["mpc", "-h", host, "toggle"])
    if tmp == "Next":
            check_call(["mpc", "-h", host, "next"])
    if tmp == "Prev":
            check_call(["mpc", "-h", host, "prev"])
    if tmp == "Random":
            check_call(["mpc", "-h", host, "random"])
    if tmp == "Volume 25%":
            check_call(["mpc", "-h", host, "volume", "25"])
    if tmp == "Volume 35%":
            check_call(["mpc", "-h", host, "volume", "35"])
    if tmp == "Volume 50%":
            check_call(["mpc", "-h", host, "volume", "50"])
    if tmp == "Volume 75%":
            check_call(["mpc", "-h", host, "volume", "75"])
    if tmp == "Volume 100%":
            check_call(["mpc", "-h", host, "volume", "100"])
    if tmp == "List":
            titles = check_output(["mpc", "-h", host, "playlist"])
            track = 0
            tlist = ""
            for line in titles.splitlines():
                    track += 1
                    tlist = tlist + "[" + str(track) + "] " + line.decode() + "\n"
            if track > 2:
                    tlist.rstrip()
                    tlist = "[SOURCES]\n" + tlist
                    tlist = "[BACK]\n" + tlist
                    rofi = Popen(["rofi", "-selected-row", "1", "-i", "-dmenu", "-no-show-icons", "-p", " "], stdout=PIPE, stdin=PIPE)
                    tmp = rofi.communicate(input=tlist.encode())[0].decode().rstrip()
                    tmp = tmp[tmp.find("[")+1:tmp.find("]")]
            else:
                    tmp = "SOURCES"
            if not tmp:
                    sys.exit(0)
            if tmp == "SOURCES":
                    commands = "Local ~/Music\n"
                    playlists = check_output(["mpc", "-h", host, "lsplaylists"])
                    for line in playlists.splitlines():
                            commands = commands + line.decode() + "\n"
                    rofi = Popen(["rofi", "-mesg", current, "-i", "-dmenu", "-no-show-icons", "-p", "Select Source: "], stdout=PIPE, stdin=PIPE)
                    tmp = rofi.communicate(input=commands.encode())[0].decode().rstrip()
                    if not tmp:
                            sys.exit(0)	
                    elif tmp == "Local ~/Music":
                            check_call(["mpc", "-h", host, "clear"])
                            check_call(["mpc", "-h", host, "update"])
                            files = check_output(["mpc", "-h", host, "listall"])
                            add = Popen(["mpc", "-h", host, "add"], stdin=PIPE)
                            add.communicate(files)
                            Popen(["mpc", "-h", host, "play"])
                    else:
                            check_call(["mpc", "-h", host, "clear"])
                            check_call(["mpc", "-h", host, "load", tmp])
                            check_call(["mpc", "-h", host, "play"])
            elif tmp == "BACK":
                run_rofi()

            else:
                    check_call(["mpc", "-h", host, "play", tmp])

run_rofi()
